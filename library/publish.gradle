apply plugin: 'maven-publish'
apply plugin: 'maven'

def GROUP_ID = 'com.feng.library'
def ARTIFACT_ID = "${project.getName()}"
def VERSION_NAME = '1.0.1'

// 获取Git 提交hash值
def GIT_COMMIT_HASH = 'git log -1 --pretty=%h'.execute([], project.rootDir).text.trim()
// 获取Git 上前的Tag
def GIT_TAG = 'git describe --tags --abbrev=0'.execute([], project.rootDir).text.trim()
// 组合Git Tag 和 Hash
def GIT_TAG_HASH = GIT_TAG + '_' + GIT_COMMIT_HASH
// 获取git Tag 往前的版本
def GIT_TAG_FORWARD = 'git describe --tags'.execute([], project.rootDir).text.trim()
// 获取Git 的地址
def GIT_URL = file('../.git/config').getText().find("(?<=url\\s=\\s).*[.]git")

def GIT_CLEAN = 'git status'.execute([], project.rootDir).text.trim()

task uploadMavenRelease(dependsOn: ['assembleRelease']) {
    doLast {
        //源码已经提交
        def isSrcClean = GIT_CLEAN.find("working\\s\\w+\\sclean")
        //代码在tag上
        def isTagHash = !GIT_TAG.isEmpty() && !GIT_TAG_FORWARD.find("-\\d*-")
        if (!isSrcClean) {
            throw new GradleException("发布release版本 git 代码必须是clean状态")
        }
        if (!isTagHash) {
            throw new GradleException("发布release版本 git 代码必须是在tag上")
        }

        uploadArchives.repositories.mavenDeployer.pom.version = "${VERSION_NAME}"
        uploadArchives.execute()
    }
}

task uploadMavenSnapshot(dependsOn: ['assembleRelease']) {
    doLast {
        uploadArchives.repositories.mavenDeployer.pom.version = "${VERSION_NAME}-SNAPSHOT"
        uploadArchives.execute()
    }
}

task Test {
    doLast {
        def abc = 'abc'

        def isTrue = abc.find("b")

        println "isTrue is ${isTrue}"

        if (isTrue) {
            println "a"
        } else {
            println "b"
        }

        println GIT_TAG_FORWARD
        
        println GIT_TAG_FORWARD.find("\\d.\\d.\\d")
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
//            repository(url: uri('../repo'))
            repository(url: uri('file:///D:/repo'))
            pom.project {
                groupId GROUP_ID
                artifactId ARTIFACT_ID
                packaging 'aar'

                scm {
                    connection "scm:git:${GIT_URL}"
                    developerConnection "scm:git:${GIT_URL}"
                    url GIT_URL
                    tag GIT_TAG_HASH
                }
            }
        }
    }
}


//def artifactory_contextUrl = 'http://192.168.6.84:8081/artifactory'
//def artifactory_user = 'qd.app'
//def artifactory_password = 'APHaUWn5pqN8gb9RQya5JhJwh'
//def snapshot_repo = 'libs-snapshot-local'
//def release_repo = 'gradle-release-local'

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            def MAVEN_LOCAL_RELEASE = "${artifactory_contextUrl}/${release_repo}"
//            def MAVEN_LOCAL_SNAPSHOT = "${artifactory_contextUrl}/${snapshot_repo}"
//            repository(url: "$MAVEN_LOCAL_RELEASE") {
//                authentication(userName: "${artifactory_user}", password: "${artifactory_password}")
//            }
//            snapshotRepository(url: "$MAVEN_LOCAL_SNAPSHOT") {
//                authentication(userName: "${artifactory_user}", password: "${artifactory_password}")
//            }
//            pom.project {
//                groupId GROUP_ID
//                artifactId ARTIFACT_ID
//                packaging 'aar'
//
//                scm {
//                    connection "scm:git:${GIT_URL}"
//                    developerConnection "scm:git:${GIT_URL}"
//                    url GIT_URL
//                    tag GIT_TAG_HASH
//                }
//            }
//        }
//    }
//}